
[CAMERA]
- Ortographic, Size: 20

[CANVAS]
- 3 paneles: Left (MinX: 0, MaxX: 0.13) / Center (MinX: 0.17, MaxX: 0.7) / Right (MinX: 0.7, MaxX: 1), todos MinY: 0, MaxY: 1
- Paneles Left y Right con un componente Image color negro y transparencia 80% (o la que queramos) para oscurecer las zonas de UI

[TEXTOS EN RIGHT PANEL]
- Arkanoid, Highscore y Score, con TextMeshPro >> lo tuneamos nosotros como queramos
- Creamos un preset (Botón Derecho > Crear > TextMeshPro > Color Gradient) y se lo asignamos a todos los textos (campo Color preset)
  De esta forma podemos cambiar el color de todos los textos al mismo tiempo

[IMPORTAR SPRITES]
- Vaus.png > Pixels per unit: 8 / Sprite mode: Multiple / Filter mode: Point (no filter)
- Walls.png > Pixels per unit: 8 / Sprite mode: Multiple / Filter mode: Point (no filter)
- Blocks.png > Pixels per unit: 8 / Sprite mode: Multiple / Filter mode: Point (no filter)
ATENCIÓN: DUPLICAMOS EL DE Walls.png y lo llamamos Backgrounds.png
- Backgrounds.png > Pixels per unit: 4 / Sprite mode: Multiple / Filter mode: Point (no filter)

Los recortamos a mano con el Sprite Editor
En el backgorund recortamos solo los claros porque el efecto oscuro ya lo hicimos nosotros en el Canvas, paneles Left y Right

Arriba a la derecha hay un botón parecido a un arco iris. Si lo pulsas pasa todo a blanco y negro,
y es más fácil ver los bordes de los sprites para recortar

[BACKGROUND]
- Gameobject con componente Sprite Renderer, Draw Mode: Tiled, Order in layer: -1 (debajo de todos), Width: 71 y Height: 40 (para que ocupe todo)

[CREAR WALLS]
- Creamos 3 walls: Top, Left y Right.
- Les ponemos un Collider2D y marcamos Auto Tiling.
- Aumentamos su tamaño hasta ocupar todos los oborder
    Top: width 39
    Left: Height 40
    Right: Height 40

[MOVIMIENTO VAUS]
- Creamos el script Vaus.cs
- Movemos el vaus con Input.GetAxis > horizontalmente
- Le ponemos un Capsule Collider2D (o un Box Collider2D)
- Le ponemos un Rigibody. Le quitamos la gravedad. Ahora ya choca contra los límites.
- Bloqueamos el movimiento en eje Y y la rotación en el eje Z.

[MOVIMIENTO BALL]
- Creamos el script Ball.cs
- Le ponemos un Rigibody. Le quitamos la gravedad.
- Le ponemos un Circle Collider2D.
- En los colliders del Ball, los Walls, los Bricks y la Vaus asignamos el Physic Material: Bouncy (Friction: 0, Bounciness: 1), el que creamos en el Pong.
  Con esto la Ball ya va a rebotar contra los Walls y contra la Vaus.
  (NOTA: Creo que sirve con que la Ball tenga ese material, me parece que a los muros no les hace falta)
- Creamos una función Release() que le asigne una velocidad inicial: rigidbody.velocity = initialVelocity;
- IMPORTANTE:
  Ponemos la Ball como hija de la Vaus para que al principio se mueva con ella
  La Ball empieza con isKinematic = true. Por eso se mueve con la Vaus
  En el momento en que llamemos a la función Release() ponemos isKinematic = false >> ahora se aplican las físicas, ya no sigue a la Vaus
  Cuando necesitemos que la bola se vuelva a pegar a la Vaus volveremos a poner isKinematic = true, y como es hija de la Vaus volverá a moverse con ella

[WORLD MANAGER]
- Creamos el Gameobject y el script WorldManager.cs
- Creamos [SerializeField] Vaus vaus; y [SerializeField] Ball ball; y les ponemos los Asserts correspondientes.
  Ahora ya tenemos un WorlManger que está acoplado con los demás y se puede comunicar con ellos.
  De esta forma nuestros gameobjects estarán desacoplados entre ellos. Se comunicarán a través de Eventos que, en general, serán manejados por el WorldManager

[RELEASE BALL]
- Creamos en la Vaus el evento para soltar la Ball:
    if (Input.GetKeyDown(KeyCode.Space)) { OnBallReleaseEvent?.Invoke(); }
- Creamos en el WorldManager la gestión de ese evento >> escucha a la Vaus pidiendo soltar la Ball y entonces llama a la función Relese() de la Ball:
    vaus.OnBallReleaseEvent += OnBallReleaseCallback;
    private void OnBallReleaseCallback() { ball.Release(); }
- Creamos la etiqueta (tag) "Ball" y se la asignamos. La usaremos más adelante.

[CONSTANTS]
- Creamos el típico archivo de constantes
        public static string HORIZONTAL_AXIS = "Horizontal"; >> moviento
        public static string FIRE_AXIS = "Jump";

[UPDATE vs FIXED UPDATE]
- Unity RECOMIENDA manejar todos los inputs en la función Update, que se ejecuta una vez por frame
  Por esa razón ponemos ahí nuestras entradas:
    horizontalInput = Input.GetAxis(Constants.HORIZONTAL_AXIS);
    isFiredPressed = Input.GetAxis(Constants.FIRE_AXIS) != 0;
- Pero, por otro lado, Unity NO RECOMIENDA utilizar Update and FixedUpdate en el mismo script
- Posible solución: manejar todas las entradas en un script específico, y ese solo tendrá Update
  De momento nosotros lo dejamos así, con Update y FixedUpdate en el mismo frame

[BRICK]
- Creamos el script Brick.cs
- Cada ladrillo tendrá una variable que indique la puntuación, score, y otra que indique los golpes que le quedan para destruirse, resistance
- Cada vez que reciba un golpe (OnCollision) restaremos una unidad a la resistencia (de momento solo controlamos el choque contra la Ball)
- Si la resistencia llega a cero enviamos un Evento indicando que el ladrillo tiene que ser destruido
- Creamos un prefab con un Brick
- Le ponemos el tag "Brick"

[SETUP BRICKS]
- En el WorldManager creamos una lista de ladrillos: List<Brick> bricks = new List<Brick>();
- Inicializamos esa lista con todos los ladrillos de la escena, buscando por el tag "Brick"
    GameObject[] brickGOs = GameObject.FindGameObjectsWithTag("Brick");
    Como la FindGameObjectsWithTag me devuelve GameObjects y no Bricks, recorro todo el array y añado cada brick a mi lista
    Aprovecho y ahí mismo le pongo el manejador del evento a cada uno de los ladrillos: brick.OnBrickDestroyedEvent += OnBrickDestroyedCallback;
- Como ya estoy haciendo muchas cosas con ladrillos separo todo ese código en una función específica: SetupBricks()

[SCORE]
- Creamos el Gameobject Score y el script Score para llevar el control de la puntuación
- Lo ponemos como hijo de WorldManager
  (todos los managers van a ser hijos de WorldManager, aunque Score será más un "colaborador" de WorldManager que un manager en sí mismo)
- Creamos la función AddScore

[HUD MANAGER]
- HUD, Head-Up Display
- WorldManager tendrá accesor a HUD Manager (los managers hablan entre ellos)
- A1cabará siendo un Singleton porque habrá uno y solo uno, y siempre será el mismo (veremos el patrón Singleton más adelante)
- Gestiona la info que se ve en pantalla durante el juego, por eso tiene acceso al texto de Score y de Highscore

De esta forma al romper un ladrillo:
- WorldManager avisará a Score y le pasará la puntuación del ladrillo que acabamos de romper
- Score añadirá esos puntos a la puntuación total
- WorldManager le preguntará a Score la puntuación actual (es su responsabilidad)
- WorldManager le pasará esa puntuación actual a HUDManager para que la muestre por pantalla (es su responsabilidad)
>> cada elemento tiene un única responsabilidad, y será WorldManager quien los coordine a todos
>> de esa forma cumplimos el SRP, Single Responsibility Principle (la "S" de los principios SOLID)

[PLAYER MANAGER]
- Ahora cogemos el GameObject llamado "Score", lo renombramos como "PlayerManager" y lo ponemos por separado >> ya no es hijo de WorldManager
- Renombramos el script Score.cs como PlayerManager.cs
  ATENCIÓN: Siempre que hagamos esto renombramos PRIMERO en el código y luego en Unity, para que nos mantenga las referencias
- La razón de hacer esto es que WorldManager controlará cada uno de los niveles, PERO DESAPARECERÁ CUANDO PASEMOS A OTRO niveles
  Sin embargo, la puntuación y las vidas SÍ SE MANTIENEN DE UN NIVEL A OTRO
  Por necesito manejarlas con otro manager diferente que sí permanezca de un nivel a otro
- ahora desde WorldManager localizo a PlayerManager de la siquiente manera:
  playerManager = GameObject.Find("PlayerManager").GetComponent<PlayerManager>();
  No lo hago por [SerializeField] porque acabaré convirtiéndolo en Singleton, que es una clase static y por lo tanto no puede trabajar con [SerializeField]

- Le añadimos a PlayerManager el control del número de vidas que tenemos
- Si pasamos de unas puntuaciones determinadas aumentamos en uno el número de vidas

[COSTE VIDA EXTRA]
1a vida a los 20.000 puntos (+20.000) / 2a vida a los 60.000 puntos (+40.000) / 3a vida a los 120.000 puntos (+60.000) / el resto cada 60.000
Yo lo hago con una matriz que guardo en el archivo de constantes:
    public static int[] EXTRA_LIFE_COSTS = {20000, 40000, 60000};
Manejo un índice que indica qué valor del array he de añadir.
Empieza en 0, se incrementa cuando gano una via extra y cuando llegue al último (60.000) se quedará siempre ahí:
    extraLifeScoresIndex = Math.Min(extraLifeScoresIndex + 1, Constants.EXTRA_LIFE_COSTS.Length - 1);
    nextExtraLifeScore += Constants.EXTRA_LIFE_COSTS[extraLifeScoresIndex];

[COMUNICACIÓN PLAYER MANAGER CON HUD MANAGER]
Para actualizar la puntuación el PlayerManager se comunicará directamente con el HUDManager (recuerda: los managers se hablan entre ellos)
Elimino del WorldManager la referencia a HUDManager y se la pongo a PlayerManager
Ahora mismo:
  - WorldManager le comunica a PlayerManager que actualice la puntuación, y le pasa la puntuación del ladrillo destruido
  - PlayerManager actualiza puntuación, se la pasa a HUD Manager para que la muestres y calcula si ganamos una nueva vida o no

[PROPIEDADES]
Encapsulo la variable con los típicos get & set. Puedo hacer público o privado el get y/o el set.
Puedo hacer las comprobaciones que quiera.
También puedo añadir comportamientos. En nuestro caso mostraremos por pantalla el nuevo valor de Score cada vez que cambie su valor.
    int Score
    {
        get
        {
            return score; >> por ejemplo podría hacer "return Format(value);" para devolver siempre el valor formateado
        }
        set
        {
            score = value;
            ShowOnScreen(value); >> puedo enseñar por pantalla el valor CADA VEZ que cambie
        }
    }
Si no hago ningún tratamiento puedo utilizar la forma resumida
    int Lives
    {
      get; set;
    }

[PATRÓN SINGLETON]
Una clase que cumple el patrón Singleton garantiza que solo existirá una única instancia de esa clase.
Siempre que se llame a esa clase:
  - Si no existía una instancia: se crea una nueva
  - Si existía una instancia: se devuelve la instancia que ya existe
  - JAMÁS se creará una segunda instancia
Es útil para tener un objeto persistente a lo largo de todo el juego, que conserve todos sus datos y que sea accesible por todo el mundo

Cada clase Singleton tendrá siempre una variable static "instance" y un método static "GetInstance()" que nos permitirá acceder a esa variable.
Recordemos que esa variable será siempre única. Y como es una clase estática puedo acceder desde donde quiera.

Como el patrón Singleton se resuelve en el Awake: ahí es donde se crea la primera instancia y también donde se destruyen las demás instancias si existieran
Eso implica que para acceder a esa clase deberemos hacerlo SIEMPRE desde Start, que se ejecuta después de Awake.
De esta forma garantizamos que se han ejecutado TODOS los Awake y que la clase Singleton ya está correctamente creada con UNA ÚNICA instancia.

[POWER UPS]
Importamos Powerups.png y troceamos
Creamos una primera animación y un primer controller (que será el controller padre que usarán todos los demás)
Ahora para cada PowerUp crearemos:
  - Una animación
  - Un controlador override (MLC > Create > Animator Override Controller)
  - A este controlador override le asignamos el controller padre
Con esto tengo todas las animaciones dependientes de una única máquina de estados: la genérica que he creado al principio

Creamos un Prefab padre, y un Prefab variant por cada PowerUp

Añadimos un CapsuleCollider2D y un Rigibody2D al Prefab padre (es decir, a todos)

Creamos el script PowerUp.cs
Distinguiremos entre los diferentes PowerUps mediante un enum. Cada uno generará su propio evento, que escuchará el WorldManager y lo gestionará
Si trabajáramos con Interfaces sería mejor separar el código de cada PowerUp en su propio archivo

Añadimos la opción None al enum PowerUpType. Ese será el valor por defecto.
Añadimos a los Bricks el campo powerType, que será el que si tienen un PowerUp, y en caso afirmativo de qué tipo es.
Asignamos en el enum PowerUpType los valores que nos convengan al instanciar el PowerUp

En WorldManager creo un array con los prefabs de los PowerUps
Cuando la Ball impacta con un Brick, el WorldManager le pregunta si tiene un PowerUp asociado, y en caso afirmativo :
  - instanciamos el prefab correpondiente
  - le asignamos la posición del Brick
  - le asignamos una rotación nula (Quaternion.identity)
  - le asignamos el PowerUpType que indicaba el Brick
  - le añadimos el callback del evento para cuando la Vaus lo recoja:
      newPowerUp.OnPowerUpActivateEvent += OnPowerUpActivateCallBack;
Después destruimos el Brick

Como ahora necesitamos establecer y recuperar el PowerUpType, lo convertimos en una propiedad (simple, no hacemos ningún tratamiento)

[VAUS ANIMATOR]
Creamos un Animator Controller para la Vaus, con los estados Normal, ToEnlarged y Enlarged (de momento)
Creamos las animaciones correspondientes a cada estados
Creamos las transiciones entre estados: de Normal a ToEnlarged será HasExitTime (se ejecutará una vez) y pasará directamente a Enlarged
Podemos hacer la transición inversa duplicando el estado ToEnlarged y poniéndole speed = -1

Creamos en Constants un enum con los estados de la Vaus: Normal, Enlarged, Laser...

[TRIGGERS]
Con los triggers suele ser muy recomendable asignarles el valor CUANDO REALMENTE CAMBIAN, para evitar saltos no deseados en la máquina de estados
      if (value != vausState)
      {
          vausState = value;
          animator.SetTrigger(vausState.ToString());
      }

[DATOS EXTERNOS]
Es buena práctica sacar todos los textos o valores fijos a un archivo de constantes.
Los guardamos en una clase estática y con variables estáticas, de forma que puedo acceder a ellos desde todo el proyecto.

Si además quiero almacenar algunos valores en un lugar donde pueda modificarlos sin tener que compilar de nuevo, puedo utilizar:
- ScriptableObjects >> archivos de Unity que se leen en tiempo de ejecución
- archivos externos >> .json, .xml, .csv o similares

[SUBMÁQUINA DE ESTADOS]
Dentro de una máquina de estados podemos crear una submáquina de estados:
  MLC > Create Sub-State Machine
La trataremos como un estado más, solo que dentro tendrá más complejidad
También puedo seleccionar un conjunto de estados y transiciones y arrastrarlos dentro de una submáquina
Dentro de una submáquina puedo crear otra, y luego otra >> recuerda a los blueprints de Unreal o el Shader Graph de Unity

[DEAD ZONE]
Creamos una DeadZone en la parte inferior de la pantalla con un Collider2D
Controlaremos con un evento (OnBallExitDeadZoneEvent) cuándo la bola alcanza y sale de esa zona, y restaremos una vida
También cambiaremos el estado de la Vaus (vaus.VausState = VausState.Destroyed;) >> la máquina de estados de la animación lanzará la ani correspondientes

[WORLD OBJECTS VS MANAGERS]
Los World Objetcts (todo tipo de objetos que hay dentro del mundo del juego) tienden a cambiar a menudo y a relacionarse mucho unos con otros.
Si hago que se comuniquen entre ellos mediante métodos tendría clases muy acopladas entre ellas, muy dependientes unas de otras.
Por esa razón intento que la comunicación sea siempre mediante eventos.
De esta forma cada uno se responsabiliza de lo suyo y solo tiene que reaccionar a cada evento puntual.

Los Manager son más estables, tienden a cambiar poco.
Suelen ser Singleton, lo cual implica que solo habrá uno de cada tipo y que podrán ser accesibles desde cualquier parte.
Además "los mánagers hablan entre ellos". Es muy habitual que se pasen mucha información entre ellos.
Por esta razón, y aunque también podríamos hacer que se comunicaran mediante eventos (y sería también correcto), en este caso es habitual utilizar métodos.

[AWAKE VS START]
Hay que tener mucho cuidado con el orden en que inicializamos las cosas.
Todos los Awake se ejecutarán SIEMPRE antes que todos los START.
TAmbién hay que prestar especial atención a las Propiedades porque a veces además de asignar valores estamos ejecutando comportamientos,
y al hacer esto quizá estemos accediendo a valores que todavía no han sido inicializador.
Ejemplo típico: función Reset() que tienen muchas clases, y que suelen ser llamadas por los manager >> Importa el orden!!!

[PROBLEMA CON LOS FRAMES Y LOS ANIMATOR]
Para que la máquina de estados del Animator cambie de estados necesita que pase al menos 1 frame
Problema MUY HABITUAL en la programación de videojuegos: la máquina recibe más de un Trigger en el mismo frame ¡y se queda solo con el último!

Una de las formas de arreglarlo es obligar a los métodos a que esperen al menos 1 frame (es lo que haremos en el Reset de nuestro PlayerManager):
      IEnumerator WorldReset()
      {
          // Each "yield return null;" makes the game waits for 1 frame
          yield return null;
          m_WorldManager.Reset();
      }
      ...
      y la llamada a la función Reset será:
      StartCoroutine(WorldReset());

Muchas veces la gestión de tiempos entre unos estados y otros dependerán de las animaciones y/o los sonidos
(las acciones siguientes se lanzarán al recibir eventos de OnComplete, o transiciones de estados entre animaciones).
Para debuguear puedo utilizar Time.frameCount, que me devuleve el número de frames que han transcurrido desde que pulsamos al Play

[DISPAROS LASER]
Creamos un prefab con el sprite de la bala. Tendrá Rigidbody y CapsuleCollider2D.
Ceramos 2 gameobjects hijos de la Vaus que serán los shooters: LeftShooter y RightShooter

Añadimos a la Vaus el script para disparar: Shooter.cs
Tendrá 2 [SerielizedField] Gameobject con los shooters.
Creará Bullets en las posiciones de los shooters.
Para disparar usaremos la función TrySHoot() porque el hecho de que queramos disparar no nos garantiza que podamos hacerlo.
Esa función controlará, mediante un IEnumerator, el intervalo de tiempo que obligaremos a esperar entre disparo y disparo.
En vez de instanciar las balas sin más utilizaremos el patrón de diseño Objec Pool, que nos permite reutilizar objetos y de esta forma ahorrar memoria.

Creamos también el script que manejará el comportamiento de la propia bala: Bullet.cs
Le ponemos una propiedad que nos indicará hacia dónde va la bala (las del Vaus irán hacia arriba, las del Doh final irán hacia abajo)

Mediante OnTriggerEnter2D los ladrillos hacen desaparecer las Bullet que golpean contra ellos.
Además añadimos una BulletEndZone en la parte superior para eliminar las balas que salen por la parte superior de la pantalla
NOTA 1: Alejandro lo hace de otra forma

[OBJECT POOL]
El Object Pool que implementamos va cogiendo el siguiente objeto que le corresponda, sin comprobar su está libre (active == false) o no.
Lo suyo sería mantener un Object Pool que sí controlara eso. Al asignar un nuevo objeto se saca del pool, y al liberarlo se vuelve a meter dentro.

Los PowerUps también podrían gestionarse con un Object Pool.


